#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>
#include <string>
#include <stdint.h>
using namespace std;


int calculate_modbus_crc();
int string2hex(char *buf, char *val);

/* Table of CRC values for high-order byte */
static const uint8_t table_crc_hi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

/* Table of CRC values for low-order byte */
static const uint8_t table_crc_lo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)			// 查表法
{
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
        i = crc_hi ^ *buffer++; /* calculate the CRC  */
        crc_hi = crc_lo ^ table_crc_hi[i];
        crc_lo = table_crc_lo[i];
    }

    return (crc_hi << 8 | crc_lo);
}

unsigned short CRC16_Modbus1(unsigned char* pcData, int iDatalen)				// 位操作
{
    unsigned short crc = 0xFFFF;
    for (int j = 0; j < iDatalen; j++)
    {
        crc = crc ^ pcData[j];
        for (int i = 0; i < 8; i++)
        {
            if ((crc & 0x0001) > 0)
            {
                crc = crc >> 1;
                crc = crc ^ 0xa001;
            }
            else
                crc = crc >> 1;
        }
    }
    return crc;
}



//原文链接：https://blog.csdn.net/u014157109/article/details/115653094
void cut_space(char* Res, char* Dec)
{
	//int i = 0;
	for (; *Res != '\0'; Res++) {
		if (*Res != ' ')
			*Dec++ = *Res;//'++' 优先级比 '*'高，但是这里'++'作为后缀，先进行*Dec，再自加
	}

	*Dec = '\0';
	return;
}


/*
 * change "E60701" to hex: 0xE60701
 */
int string2hex(char *buf, char *val)
{
	int i = 0;
	int num;
	
	printf(" datalen: %d \n", strlen(buf)/2);
	printf(" str buf: %s \n", buf);
	printf(" data:");
	
	for(; i<strlen(buf)/2; i++){
		sscanf(buf+i*2, "%2x", val+i);
		printf(" %02X", *((char*)(val+i)));
	}
	
	printf("\n");
	
	return strlen(buf)/2;
}

/*
 * 按字节解析data   
 * such: data[0] == crc 第一字节值	d
 * 		data[1] == crc 第二字节
 */
union test{
	unsigned short crc;	
	unsigned char data[2];
} format;

int main()
{
//    unsigned char data[2] = { 0x10,0x01 };
    unsigned char data[6] = { 0x01,0x01,0x07,0xD0,0x00,0x03 };
    unsigned char test[6] = { 0x01,0x08,0x00,0x0E,0x00,0x00 };
    unsigned char test2[5] = { 0x01,0x2B,0x0E,01,00 };
    unsigned char test_0x43[3] = { 0x01,0x2B,0x00 };
    
    calculate_modbus_crc();
    
//    unsigned short CRC= CRC16_Modbus1(data, 6);
//    unsigned short CRC= CRC16_Modbus1(test, 6);
//    
//    std::cout << CRC;
//    printf("\n");    
//    
//    format.crc = CRC;
//    printf("modbus-crc %x %x \n", format.data[0], format.data[1]);
//
//    printf("CRC: %x \n", CRC);
//    printf("CRC: %x %x \n\n", *(((char*)&CRC) + 1), (char)CRC);
//    printf("CRC: %x %x \n\n", (char)CRC), *(((char*)&CRC) + 1);
}


// design： 1. 运行程序后， 用户cmd：输入需要计算校验值的报文：
// 2. scanf(%s, frame);  printf("modbus CRC: %d \n", crc);
int calculate_modbus_crc()
{
	int i;
	char buf[255];
	char frame[255];
//	char StrDec[255];
	uint16_t len;
	
	while ( frame[0] != 'q')
	{
		cout << "Enter frame to be checked (q = quit)" << endl;
		gets(frame);
		
		cut_space(frame,buf);
//		printf("%s %d\n", StrDec, strlen(StrDec)/2);
		len = string2hex(buf,frame);			// 字符次转hex
		
	    for (i=0; i < len; i++)
	        printf("<%.2X>", ((uint8_t*)frame)[i]);          // 打印接收的数据
		uint16_t CRC = crc16((uint8_t*)frame, len);		// 计算校验值
//		printf("  buflen:%d   ",len);
//		printf("  test crc 16 : %0X \n",CRC);
		
//	    cout << "value" << CRC << endl;
	    format.crc = CRC;
	    printf("\n\n modbus-crc is %x %x \n", format.data[0], format.data[1]);
        printf("  data:\n  ");
        for (i=0; i < len; i++)
	        printf("%.2X ", ((uint8_t*)frame)[i]);          // 打印接收的数据
        printf("%.2X %.2X \n\n", format.data[0], format.data[1]);
	};

	return 0;
}


